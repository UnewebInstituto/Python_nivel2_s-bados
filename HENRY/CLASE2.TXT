#### What is `venv`?

**`venv`** is a module in Python that allows you to create lightweight **virtual environments**. Each virtual environment has its own independent set of Python packages, which helps to manage dependencies for different projects without conflicts. This is particularly useful when working on multiple projects that may require different versions of libraries or packages.

#### Why Use `venv`?

Using `venv` provides several benefits:

- **Isolation**: Each virtual environment is isolated from the global Python environment, meaning that changes in one environment do not affect others. This is crucial for avoiding dependency conflicts.
- **Control**: It gives you more control over the packages and versions you are using for a specific project.
- **Convenience**: You can easily create and manage environments, making it simpler to switch between different project setups.

#### How to Create a Virtual Environment with `venv`

To create a virtual environment using `venv`, you can follow these steps:

1. **Open your terminal**.
2. **Navigate to your project directory** where you want to create the virtual environment.
3. Run the following command:
   ```
   python3 -m venv .venv
   ```
   This command creates a new directory named `.venv` in your project folder, which contains the virtual environment.

4. **Activate the virtual environment**:
   - On Windows:
     ```
     .venv\Scripts\activate
     ```
   - On macOS and Linux:
     ```
     source .venv/bin/activate
     ```

Once activated, you can install packages using `pip`, and they will be contained within this environment.

#### Conclusion

Using `venv` is a best practice for Python development, especially when managing multiple projects. It helps maintain clean and organized project environments, ensuring that dependencies are handled correctly and efficiently.

Python 3.12.0 (tags/v3.12.0:0fb18b0, Oct  2 2023, 13:03:39) [MSC v.1935 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
help()

Welcome to Python 3.12's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the internet at https://docs.python.org/3.12/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> modules

Please wait a moment while I gather a list of all available modules...

test_sqlite3: testing with SQLite version 3.42.0

Warning (from warnings module):
  File "C:\Python\Lib\site-packages\vboxapi-1.0-py3.12.egg\vboxapi\__init__.py", line 73
SyntaxWarning: invalid escape sequence '\P'

Warning (from warnings module):
  File "C:\Python\Lib\site-packages\vboxapi-1.0-py3.12.egg\vboxapi\__init__.py", line 73
SyntaxWarning: invalid escape sequence '\P'
PyInstaller         aifc                idle                searchbase
__future__          altgraph            idle_test           searchengine
__hello__           antigravity         idlelib             secrets
__main__            argparse            imaplib             select
__phello__          array               imghdr              selectors
_abc                ast                 importlib           setuptools
_aix_support        asyncio             importlib_metadata  shelve
_ast                atexit              inflect             shlex
_asyncio            audioop             inspect             shutil
_bisect             autocommand         io                  sidebar
_blake2             autocomplete        iomenu              signal
_bz2                autocomplete_w      ipaddress           site
_codecs             autoexpand          itertools           six
_codecs_cn          backports           json                smtplib
_codecs_hk          base64              keyword             sndhdr
_codecs_iso2022     bdb                 lib2to3             socket
_codecs_jp          binascii            linecache           socketserver
_codecs_kr          bisect              locale              sqlite3
_codecs_tw          browser             logging             squeezer
_collections        builtins            lzma                sre_compile
_collections_abc    bz2                 macosx              sre_constants
_compat_pickle      cProfile            mailbox             sre_parse
_compression        calendar            mailcap             ssl
_contextvars        calltip             mainmenu            stackviewer
_csv                calltip_w           marshal             stat
_ctypes             cgi                 math                statistics
_ctypes_test        cgitb               mimetypes           statusbar
_datetime           chunk               mmap                string
_decimal            cmath               modulefinder        stringprep
_distutils_hack     cmd                 more_itertools      struct
_elementtree        code                msilib              subprocess
_functools          codecontext         msvcrt              sunau
_hashlib            codecs              multicall           symtable
_heapq              codeop              multiprocessing     sys
_imp                collections         mysql               sysconfig
_io                 colorizer           mysqlx              tabnanny
_json               colorsys            netrc               tarfile
_locale             compileall          nntplib             telnetlib
_lsprof             concurrent          nt                  tempfile
_lzma               config              ntpath              test
_markupbase         config_key          nturl2path          textview
_md5                configdialog        numbers             textwrap
_msi                configparser        numpy               this
_multibytecodec     contextlib          opcode              threading
_multiprocessing    contextvars         operator            time
_mysql_connector    copy                optparse            timeit
_opcode             copyreg             ordlookup           tkinter
_operator           crypt               os                  token
_osx_support        csv                 outwin              tokenize
_overlapped         ctypes              packaging           tomli
_pickle             curses              pandas              tomllib
_py_abc             dataclasses         parenmatch          tooltip
_pydatetime         datetime            pathbrowser         trace
_pydecimal          dateutil            pathlib             traceback
_pyinstaller_hooks_contrib dbm                 pdb                 tracemalloc
_pyio               debugger            pefile              tree
_pylong             debugger_r          percolator          tty
_queue              debugobj            peutils             turtle
_random             debugobj_r          pickle              turtledemo
_sha1               decimal             pickletools         typeguard
_sha2               delegator           pip                 types
_sha3               difflib             pipes               typing
_signal             dis                 pkg_resources       typing_extensions
_sitebuiltins       doctest             pkgutil             tzdata
_socket             dynoption           platform            undo
_sqlite3            editor              platformdirs        unicodedata
_sre                email               plistlib            unittest
_ssl                encodings           poplib              urllib
_stat               ensurepip           posixpath           util
_statistics         enum                pprint              uu
_string             errno               profile             uuid
_strptime           faulthandler        pstats              vboxapi
_struct             filecmp             pty                 vboxapisetup
_symtable           fileinput           py_compile          venv
_testbuffer         filelist            pyclbr              warnings
_testcapi           fnmatch             pydoc               wave
_testclinic         format              pydoc_data          weakref
_testconsole        fractions           pyexpat             webbrowser
_testimportmultiple ftplib              pymysql             wheel
_testinternalcapi   functools           pyparse             win32ctypes
_testmultiphase     gc                  pyshell             window
_testsinglephase    genericpath         pytz                winreg
_thread             getopt              query               winsound
_threading_local    getpass             queue               wsgiref
_tkinter            gettext             quopri              xdrlib
_tokenize           glob                random              xml
_tracemalloc        graphlib            re                  xmlrpc
_typing             grep                redirector          xxsubtype
_uuid               gzip                replace             zipapp
_warnings           hashlib             reprlib             zipfile
_weakref            heapq               rlcompleter         zipimport
_weakrefset         help                rpc                 zipp
_winapi             help_about          run                 zlib
_wmi                history             runpy               zoneinfo
_xxinterpchannels   hmac                runscript           zoomheight
_xxsubinterpreters  html                sched               zzdummy
_zoneinfo           http                scrolledlist        
abc                 hyperparser         search              

Enter any module name to get more help.  Or, type "modules spam" to search
for modules whose name or summary contain the string "spam".

help> 

You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executing "help('string')"
has the same effect as typing a particular string at the help> prompt.



import mysql.connector
mibd = mysql.connector.connect(host="localhost",user="root",passwd="",database="bdpyn2_henry")
instruccion = mibd.cursor()
sql = "SELECT * FROM usuarios"
sql = "SELECT * FROM personas"
resultado = instruccion.execute(sql)
for datos in resultado:
    datos

    
Traceback (most recent call last):
  File "<pyshell#11>", line 1, in <module>
    for datos in resultado:
TypeError: 'NoneType' object is not iterable
instruccion.execute(sql)
Traceback (most recent call last):
  File "<pyshell#12>", line 1, in <module>
    instruccion.execute(sql)
  File "C:\Python\Lib\site-packages\mysql\connector\cursor.py", line 521, in execute
    self._connection.handle_unread_result()
  File "C:\Python\Lib\site-packages\mysql\connector\connection.py", line 1059, in handle_unread_result
    raise errors.InternalError("Unread result found")
mysql.connector.errors.InternalError: Unread result found
mibd.close()
mibd = mysql.connector.connect(host="localhost",user="root",passwd="",database="bdpyn2_henry")
sql = "SELECT * FROM personas"
instruccion.execute(sql)
Traceback (most recent call last):
  File "<pyshell#16>", line 1, in <module>
    instruccion.execute(sql)
  File "C:\Python\Lib\site-packages\mysql\connector\cursor.py", line 521, in execute
    self._connection.handle_unread_result()
  File "C:\Python\Lib\site-packages\mysql\connector\connection.py", line 1059, in handle_unread_result
    raise errors.InternalError("Unread result found")
mysql.connector.errors.InternalError: Unread result found
mibd.close()
import mysql.connector
mibd = mysql.connector.connect(host="localhost",user="root",passwd="",database="bdpyn2_henry")
sql = "SELECT * FROM personas"
instruccion = mibd.cursor()
instruccion.execute(sql)
for data in instruccion.fetchall():
    data

    
(1, 'V1234567', 'ANA', 'VASQUEZ', 'SANTA FE', datetime.date(1960, 8, 25))
(2, 'V1234568', 'YOLANDA', 'TORTOZA', 'CATIA LA MAR', datetime.date(1975, 9, 15))
(3, 'V1234568', 'YOLANDA', 'TORTOZA', 'CATIA LA MAR', datetime.date(1975, 9, 15))
(4, 'V1234565', 'LIBIA', 'COLS', 'GUARENAS', datetime.date(1980, 6, 15))
(6, 'V9876543', 'NORMA', 'GAINFA', 'EL VALLE', datetime.date(1972, 7, 17))
(7, 'V12100200', 'MARIA', 'PEREZ', 'MONTALBAN', datetime.date(1998, 9, 20))
sql = "DESCRIBE personas"
instruccion.execute(sql)
for data in instruccion.fetchall():
    data

    
('id', 'int(11)', 'NO', 'PRI', None, 'auto_increment')
('cedula', 'varchar(10)', 'YES', '', None, '')
('nombre', 'varchar(30)', 'YES', '', None, '')
('apellido', 'varchar(30)', 'YES', '', None, '')
('direccion', 'text', 'YES', '', None, '')
('fechanac', 'date', 'YES', '', None, '')
sql = "UPDATE personas SET direccion = 'LOS PALOS GRANDES' WHERE cedula = 'V12100200'"
instruccion.execute(sql)
mibd.commit()
instruccion.rowcount()
Traceback (most recent call last):
  File "<pyshell#33>", line 1, in <module>
    instruccion.rowcount()
TypeError: 'int' object is not callable
instruccion.rowcount
1
sql = "SELECT * FROM personas"
instruccion.execute(sql)
for data in instruccion.fetchall():
    data

    
(1, 'V1234567', 'ANA', 'VASQUEZ', 'SANTA FE', datetime.date(1960, 8, 25))
(2, 'V1234568', 'YOLANDA', 'TORTOZA', 'CATIA LA MAR', datetime.date(1975, 9, 15))
(3, 'V1234568', 'YOLANDA', 'TORTOZA', 'CATIA LA MAR', datetime.date(1975, 9, 15))
(4, 'V1234565', 'LIBIA', 'COLS', 'GUARENAS', datetime.date(1980, 6, 15))
(6, 'V9876543', 'NORMA', 'GAINFA', 'EL VALLE', datetime.date(1972, 7, 17))
(7, 'V12100200', 'MARIA', 'PEREZ', 'LOS PALOS GRANDES', datetime.date(1998, 9, 20))

Para modificar tu código de Python y permitir la selección múltiple utilizando `Checkbutton` en lugar de `Radiobutton`, necesitas cambiar la forma en que gestionas las variables de selección. En lugar de usar una única `StringVar`, puedes utilizar una lista o un diccionario para almacenar el estado de cada `Checkbutton`. Aquí tienes el código modificado:

```python
# Se le da un alias a la librería tkinter
import tkinter as tk 

def imprimir_seleccion():
    seleccionados = [opcion for opcion, estado in opciones.items() if estado.get()]
    print("Opciones seleccionadas:", seleccionados)

# Se crea el objeto ventana a partir de la clase tkinter
ventana = tk.Tk()

# Definición de un diccionario para almacenar el estado de cada Checkbutton
opciones = {
    "ESTUDIA": tk.BooleanVar(),
    "TRABAJA": tk.BooleanVar(),
    "OTRA": tk.BooleanVar()
}

# Creación de los Checkbuttons
checkButton1 = tk.Checkbutton(ventana, text="Estudia", variable=opciones["ESTUDIA"], command=imprimir_seleccion)
checkButton2 = tk.Checkbutton(ventana, text="Trabaja", variable=opciones["TRABAJA"], command=imprimir_seleccion)
checkButton3 = tk.Checkbutton(ventana, text="Otra", variable=opciones["OTRA"], command=imprimir_seleccion)

# Empaquetar los Checkbuttons en la ventana
checkButton1.pack()
checkButton2.pack()
checkButton3.pack()

# Iniciar el bucle principal de la ventana
ventana.mainloop()
```

### Cambios Realizados:
- **Uso de `BooleanVar`:** Cada opción ahora utiliza un `BooleanVar` para almacenar su estado (seleccionado o no).
- **Lista de Selección:** La función `imprimir_seleccion` ahora crea una lista de las opciones seleccionadas al verificar el estado de cada `BooleanVar`.
- **Salida de Selección:** Al seleccionar o deseleccionar una opción, se imprime la lista actual de opciones seleccionadas.

Con estos cambios, el programa ahora permite seleccionar múltiples opciones y muestra cuáles han sido seleccionadas. ¡Espero que esto te sea útil!


Para asignar un espacio en blanco al contenido de un `Entry` en Tkinter, puedes utilizar el método `insert()` para agregar un espacio en blanco al campo de entrada. Aquí tienes un ejemplo de cómo hacerlo:

```python
import tkinter as tk

# Crear la ventana principal
ventana = tk.Tk()

# Crear un Entry vacío
entrada = tk.Entry(ventana)
entrada.pack()

# Asignar un espacio en blanco al Entry
entrada.insert(0, " ")  # Inserta un espacio en blanco en la posición 0

# Iniciar el bucle principal de la ventana
ventana.mainloop()
```

### Explicación:
- **`entrada.insert(0, " ")`**: Este método inserta un espacio en blanco en la posición inicial (índice 0) del `Entry`. Esto significa que cuando se muestre la ventana, el campo de entrada tendrá un espacio en blanco visible.

Si deseas que el `Entry` esté completamente vacío al inicio, simplemente no llames al método `insert()`. Pero si quieres que contenga un espacio en blanco, el código anterior es la forma correcta de hacerlo. ¡Espero que esto te ayude!

Para modificar el código de manera que el contenido del `Entry` se inicialice en un espacio en blanco después de pulsar el botón, puedes agregar una línea en la función `imprimir_valor()` que limpie el contenido del `Entry`. Aquí tienes el código modificado:

```python
import tkinter as tk

def imprimir_valor():
    print("Contenido del valor ingresado:", entrada.get())
    entrada.delete(0, tk.END)  # Limpia el contenido del Entry

ventana = tk.Tk()

entrada = tk.Entry(ventana, width=40)
boton = tk.Button(ventana, text="Obtener valor", command=imprimir_valor)

entrada.pack()
boton.pack()

ventana.mainloop()
```

### Cambios Realizados:
- **`entrada.delete(0, tk.END)`**: Esta línea se añade a la función `imprimir_valor()`. El método `delete()` se utiliza para eliminar el contenido del `Entry`, donde `0` es el índice del primer carácter y `tk.END` indica el final del texto en el `Entry`. Esto efectivamente limpia el campo de entrada después de que se presiona el botón.

Con esta modificación, cada vez que presiones el botón "Obtener valor", se imprimirá el contenido actual del `Entry` y luego se limpiará, dejándolo en blanco. ¡Espero que esto te sea útil!
